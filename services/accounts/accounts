#!/usr/local/bin/nush
(load "AgentHTTP")
(load "AgentCrypto")
(load "AgentMongoDB")
(load "AgentJSON")
(load "keys")

(let ((mongo (AgentMongoDB new)))
     (mongo connect)
     (mongo removeWithCondition:nil fromCollection:"accounts.services")
     (SERVICES each:
               (do (service)
                   (mongo insertObject:service intoCollection:"accounts.services"))))

(def oid (string) ;; MongoDB helper
     ((AgentBSONObjectID alloc) initWithString:string))

(def strip-time (time)
     ((time componentsSeparatedByString:".") 0))

(macro redirect (location)
       `(progn (RESPONSE setStatus:303)
               (RESPONSE setValue:,location forHTTPHeader:"Location")
               "redirecting"))

(class NSNumber
 (- map:fn is
    (set result (array))
    (self times:(do (i) (result addObject:(fn i))))
    result))

(macro get-sessions-for-visitor (REQUEST)
       `(progn (set SESSIONS (array))
               (if (set token ((,REQUEST cookies) session:))
                   (then (set mongo (AgentMongoDB new))
                         (mongo connect)
                         (set SESSIONS (mongo findArray:(dict token:token) inCollection:"accounts.sessions"))))
               SESSIONS))

(macro administrator-is-logged-in (REQUEST)
       `(progn (unless (and (defined google_screen_name) google_screen_name)
                       (get-sessions-for-visitor ,REQUEST))
               (and google_screen_name (eq google_screen_name ADMIN))))

(macro authenticate ()
       '(progn (get-sessions-for-visitor REQUEST)))

;; A class for managing user-identifying cookies.
(class AgentHTTPCookie is NSObject
 
 (+ (id) cookieWithName:(id) name value:(id)value is
    ((self alloc) initWithName:name value:value expiration:(NSDate dateWithTimeIntervalSinceNow:3600)))
 
 (- (id) initWithName:(id) name value:(id) value expiration:(id) expiration is
    (super init)
    (set @name name)
    (set @value value)
    (set @expiration expiration)
    (set @stringValue nil)
    self)
 
 (- (id) description is
    "cookie=#{@name} path=\"/\" value=#{@value} expiration=#{(@expiration agent_rfc1123String)}")
 
 ;; Get a string value for a cookie suitable for inclusion in a response header.
 (- (id) stringValue is "#{@name}=#{@value}; path=\/; Expires:#{(@expiration agent_rfc1123String)};"))

(def nonce () ((AgentUUID new) stringValue))

;;;;;

;; local signin

(macro signin-form ()
       `(progn (htmlpage "Sign In"
                         (&div class:"row"
                               (&div class:"large-3 columns" (&p))
                               (&div class:"large-9 columns"
                                     (&h2 ,message)
                                     (&form id:"email-form" method:"post" action:"/accounts/signin"
                                            (&table (&tr (&td (&label for:"username" "Username "
                                                                    style:"margin-right:2em"))
                                                         (&td (&input id:"username"
                                                                    type:"text"
                                                                   width:20
                                                                    name:"username"
                                                                   title:"username"
                                                                   value:,username)))
                                                    (&tr (&td (&label for:"password" "Password "
                                                                    style:"margin-right:2em"))
                                                         (&td (&input id:"password"
                                                                    type:"password"
                                                                   width:20
                                                                    name:"password"
                                                                   title:"password"
                                                                   value:,password)))
                                                    (&tr (&td)
                                                         (&td (&button type:"submit" "&nbsp;Sign in&nbsp;"))))))))))

(get "/accounts/signin"
     (REQUEST setContentType:"text/html")
     (set username "")
     (set password "")
     (set message "Please sign in.")
     (signin-form))

(set PASSWORD_SALT "123")

(post "/accounts/signin"
      (set mongo (AgentMongoDB new))
      (mongo connect)
      (REQUEST setContentType:"text/html")
      (set ip-address ((REQUEST headers) "X-Forwarded-For"))
      (set username ((REQUEST post) "username"))
      (set password ((REQUEST post) "password"))
      (puts ((REQUEST post) description))
      (cond ((or (not username) (not password))
             (set message "Missing username or password. Try that again.")
             (eval signin-form))
            ((set account (mongo findOne:(dict username:username
                                               password:(password md5HashWithSalt:PASSWORD_SALT))
                            inCollection:"accounts.users"))
             (set session-cookie (create-cookie SITE))
             (puts "setting cookie: #{(display-cookie session-cookie)}")
             (RESPONSE setValue:(display-cookie session-cookie) forHTTPHeader:"Set-Cookie")
             (set session (dict account_id:(account _id:) cookie:(session-cookie value:)))
             (puts "MATCH")
             (mongo updateObject:session
                    inCollection:"accounts.sessions"
                   withCondition:(dict account_id:(account _id:))
               insertIfNecessary:YES
           updateMultipleEntries:NO)
             (RESPONSE redirectResponseToLocation:"/accounts"))
            (else (set message "Password mismatch. Try that again.")
                  (eval signin-form))))

;;;;; Twitter-based signin

;; ===== OAuth =====

(def oauth-sign (method url m secret)
     (set presignature ((((m allKeys) sort) map:
                         (do (key) ((+ key "=" ((m objectForKey:key) agent_urlEncodedString))))) componentsJoinedByString:"&"))
     (set signature-base-string (+ method "&" (url agent_urlEncodedString) "&" (presignature agent_urlEncodedString)))
     (puts signature-base-string)
     (set signature ((signature-base-string dataUsingEncoding:NSUTF8StringEncoding)
                     agent_hmacSha1DataWithKey:(secret dataUsingEncoding:NSUTF8StringEncoding)))
     (set b64 (signature agent_base64EncodedString))
     (m setObject:b64 forKey:"oauth_signature"))

(def bare-oauth-request (method method_url method_call consumer_secret token_secret)
     (oauth-sign method method_url method_call (+ consumer_secret "&" token_secret))
     (set path method_url)
     
     (if (eq method "GET")
         (then (set path (+ path "?" (method_call agent_urlQueryString)))))
     
     (set url (NSURL URLWithString:path))
     (set request (NSMutableURLRequest requestWithURL:url))
     (request setHTTPMethod:method)
     
     (set authorization (+ "OAuth "
                           ((((method_call allKeys) sort) map:
                             (do (key) ((+ key "=\"" ((method_call objectForKey:key) agent_urlEncodedString) "\""))))
                            componentsJoinedByString:",")))
     (request addValue:authorization forHTTPHeaderField:"Authorization")
     request)

(def oauth-request (method method_url method_call consumer_secret token_secret)
     (if NO
         (oauth-sign method method_url method_call (+ consumer_secret "&" token_secret))
         (set path method_url)
         (set url (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:url))
         (request setHTTPMethod:method)
         (set authorization (+ "OAuth "
                               ((((method_call allKeys) sort) map:
                                 (do (key) ((+ key "=\"" ((method_call objectForKey:key) agent_urlEncodedString) "\""))))
                                componentsJoinedByString:",")))
         (request addValue:authorization forHTTPHeaderField:"Authorization"))
     (set request (bare-oauth-request method method_url method_call consumer_secret token_secret))
     (set response (NuReference new))
     (set error (NuReference new))
     (set data (NSURLConnection sendSynchronousRequest:request returningResponse:response error:error))
     (set s (NSString stringWithData:data encoding:NSUTF8StringEncoding))
     (set result (s agent_urlQueryDictionary))
     result)

(get "/accounts/twitter/signin"
     (set serviceinfo (SERVICES find:(do (s) (eq (s vendor:) "twitter"))))
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set returnAddress (((REQUEST query) agent_urlQueryDictionary) r:))
     (set result
          (oauth-request "POST"
                         (serviceinfo oauth_request_token_url:)
                         (dict oauth_version:"1.0"
                                 oauth_nonce:(nonce)
                             oauth_timestamp:((((NSDate date) timeIntervalSince1970) intValue) stringValue)
                              oauth_callback:"http://alpha.agent.io/accounts/twitter/callback"
                          oauth_consumer_key:(serviceinfo oauth_consumer_key:)
                      oauth_signature_method:"HMAC-SHA1")
                         (serviceinfo oauth_consumer_secret:)
                         ""))
     (unless (and (result oauth_token:) (result oauth_token_secret:))
             (puts "Twitter OAuth error")
             (puts (result description))
             (return (redirect "/accounts")))
     (set oauth_session (dict oauth_token:(result oauth_token:)
                       oauth_token_secret:(result oauth_token_secret:)
                           return_address:returnAddress
                               created_at:(NSDate date)))
     (mongo insertObject:oauth_session intoCollection:"accounts.twitter_sessions")
     (set url (+ (serviceinfo oauth_authorize_url:) "?oauth_token=" (result oauth_token:)))
     (redirect url))

(get "/accounts/twitter/callback"
     (set serviceinfo (SERVICES find:(do (s) (eq (s vendor:) "twitter"))))
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set TOKEN (((REQUEST query) agent_urlQueryDictionary) oauth_token:))
     (unless TOKEN
             (NSLog "no token sent to twitter-callback, assuming access denied")
             (return (redirect "/accounts")))
     (set VERIFIER (((REQUEST query) agent_urlQueryDictionary) oauth_verifier:))
     (unless VERIFIER
             (NSLog "no verifier set to twitter-callback, assuming access denied")
             (return (redirect "/accounts")))
     (set oauth_session (mongo findOne:(dict oauth_token:TOKEN) inCollection:"accounts.twitter_sessions"))
     (unless oauth_session
             (NSLog "oauth session not found")
             (&pre ((REQUEST query) description))
             (return (redirect "/accounts")))
     (set returnAddress (oauth_session "return_address"))
     (set result
          (oauth-request "POST"
                         (serviceinfo oauth_access_token_url:)
                         (dict oauth_version: "1.0"
                                 oauth_nonce:(nonce)
                             oauth_timestamp:((((NSDate date) timeIntervalSince1970) intValue) stringValue)
                          oauth_consumer_key:(serviceinfo oauth_consumer_key:)
                                 oauth_token:TOKEN
                      oauth_signature_method:"HMAC-SHA1"
                              oauth_verifier:VERIFIER)
                         (serviceinfo oauth_consumer_secret:)
                         (oauth_session oauth_token_secret:)))
     
     ;; delete the old session before we parse the results
     (mongo removeWithCondition:(dict oauth_token:TOKEN) fromCollection:"accounts.twitter_sessions")
     
     (set SCREEN_NAME (result screen_name:))
     (set USER_ID (result user_id:))
     (set TOKEN (result oauth_token:))
     (set TOKEN_SECRET (result oauth_token_secret:))
     (set SECRET (+ (serviceinfo oauth_consumer_secret:) "&" TOKEN_SECRET))
     (NSLog (result description))
     
     (unless (set SESSIONTOKEN ((REQUEST cookies) session:))
             (set SESSIONTOKEN (nonce))
             ;; let's set a cookie too
             (set sessionCookie (AgentHTTPCookie cookieWithName:"session" value:SESSIONTOKEN))
             (RESPONSE setValue:(sessionCookie stringValue) forHTTPHeader:"Set-Cookie"))
     ;; save session info in database
     (result created:(NSDate date) token:SESSIONTOKEN)
     (result provider:"twitter")
     (result _username:(result screen_name:))
     (mongo insertObject:result intoCollection:"accounts.sessions")
     
     (redirect (or returnAddress "/accounts")))

;;;;;

;; https://developers.google.com/accounts/docs/OAuth2Login
(get "/accounts/google/update"
     (authenticate)
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set sessions (mongo findArray:(dict provider:"google") inCollection:"accounts.sessions"))
     (sessions each:
               (do (session)
                   (set id_token (session id_token:))
                   ;; the response is a JSON Web Token (http://openid.net/specs/draft-jones-json-web-token-07.html)
                   (set parts (id_token componentsSeparatedByString:"."))
                   (set payload (parts 1))
                   ;; convert the base64 encoding to the version we can decode
                   (set payload (payload stringByReplacingOccurrencesOfString:"." withString:"+"))
                   (set payload (payload stringByReplacingOccurrencesOfString:"_" withString:"/"))
                   (set data (NSData agent_dataWithBase64EncodedString:payload))
                   (set string (NSString stringWithData:data encoding:NSUTF8StringEncoding))
                   (set object (string agent_JSONValue))
                   ;; save session info in database
                   (session user:object)
                   (session _username:((session user:) email:))
                   (mongo updateObject:session
                          inCollection:"accounts.sessions"
                         withCondition:(dict _id:(session _id:))
                     insertIfNecessary:NO
                 updateMultipleEntries:NO)))
     (redirect "/accounts"))

;; GENERIC OAuth2

(get "/accounts/service:/signin"
     (set serviceinfo (SERVICES find:(do (s) (eq (s vendor:) service))))
     (set token (nonce))
     (set query (dict client_id:(serviceinfo client_id:)
                  response_type:"code"
                   redirect_uri:(serviceinfo redirect_uri:)
                          state:token))
     (if (serviceinfo authorize_args:) (query addEntriesFromDictionary:(serviceinfo authorize_args:)))
     (set path (+ (serviceinfo authorize_url:) "?" (query agent_urlQueryString)))
     (redirect path))

(get "/accounts/service:/oauth2callback"
     (set serviceinfo (SERVICES find:(do (s) (eq (s vendor:) service))))
     (NSLog "#{service} CALLBACK")
     (set query ((REQUEST query) agent_urlQueryDictionary))
     (unless (query code:)
             (return (redirect "/accounts")))
     (NSLog (query code:))
     (set path (serviceinfo access_url:))
     (set post (dict code:(query code:)
                client_id:(serviceinfo client_id:)
            client_secret:(serviceinfo client_secret:)
             redirect_uri:(serviceinfo redirect_uri:)
               grant_type:"authorization_code"))
     (set request (NSMutableURLRequest requestWithURL:(NSURL URLWithString:path)))
     (request setHTTPMethod:"POST")
     ;(request setValue:"application/json" forHTTPHeaderField:"Accept")
     (request setHTTPBody:((post agent_urlQueryString) dataUsingEncoding:NSUTF8StringEncoding))
     (set responseData
          (NSURLConnection sendSynchronousRequest:request
                                returningResponse:(set responsep (NuReference new))
                                            error:(set errorp (NuReference new))))
     (puts (((responsep value) allHeaderFields) description))
     (set contentType (((responsep value) allHeaderFields) Content-Type:))
     (puts contentType)
     (set parts (contentType componentsSeparatedByString:" "))
     
     (set responseString (NSString stringWithData:responseData encoding:NSUTF8StringEncoding))
     (NSLog responseString)
     
     (if (eq (parts 0) "application/json")
         (then (set responseObject (responseString agent_JSONValue)))
         (else (set responseObject (responseString agent_urlQueryDictionary))))
     
     ;; save session info in database
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (mongo insertObject:responseObject intoCollection:"accounts.responses")
     (set result (responseObject mutableCopy))
     
     (unless (set SESSIONTOKEN ((REQUEST cookies) session:))
             (set SESSIONTOKEN (nonce))
             ;; let's set a cookie too
             (set sessionCookie (AgentHTTPCookie cookieWithName:"session" value:SESSIONTOKEN))
             (RESPONSE setValue:(sessionCookie stringValue) forHTTPHeader:"Set-Cookie"))
     
     (result created:(NSDate date) token:SESSIONTOKEN)
     (result provider:service)
     (result _username:(result description))
     (mongo insertObject:result intoCollection:"accounts.sessions")
     (redirect "/accounts"))

(macro htmlpage (title *body)
       `(&html class:"no-js" lang:"en"
               (&head (&meta charset:"utf-8")
                      (&meta name:"viewport" content:"width=device-width, initial-scale=1.0")
                      (&meta name:"description" content:"My Agent on the Internet")
                      (&meta name:"keywords" content:"agent,personal")
                      (&meta name:"author" content:"Tim Burks")
                      (&title ,title)
                      (&link rel:"stylesheet" href:"/foundation-5/css/foundation.min.css")
                      (&script src:"/foundation-5/js/vendor/modernizr.js"))
               (&body ,@*body
                      (&div class:"row"
                            (&div class:"large-12 columns"
                                  (&hr)
                                  (&p style:"font-size:80%"
                                      (&strong "Agent I/O")
                                      )))
                      (&script src:"/foundation-5/js/vendor/jquery.js")
                      (&script src:"/foundation-5/js/foundation.min.js")
                      (&script "$(document).foundation();"))))

(def escape (string)
     (set string (string stringByReplacingOccurrencesOfString:"&" withString:"&amp;"))
     (set string (string stringByReplacingOccurrencesOfString:"<" withString:"&lt;"))
     (set string (string stringByReplacingOccurrencesOfString:">" withString:"&gt;"))
     (set string (string stringByReplacingOccurrencesOfString:"\"" withString:"&quot;"))
     string)

(macro topbar ()
       (unless (defined google_screen_name) (set google_screen_name nil))
       (unless (defined searchtext) (set searchtext ""))
       (set mongo (AgentMongoDB new))
       (mongo connect)
       (set account_services (mongo findArray:(dict $query:(dict) $orderby:(dict vendor:1))
                                 inCollection:"accounts.services"))
       (NSLog (account_services description))
       (&div class:"contain-to-grid" style:"margin-bottom:20px;"
             (&nav class:"top-bar" data-topbar:1
                   (&ul class:"title-area"
                        (&li class:"name"
                             (&h1 (&a href:"/accounts" "Accounts")))
                        (&li class:"toggle-topbar menu-icon" (&a href:"#" "Menu")))
                   (&section class:"top-bar-section">
                             ;;<!-- Right Nav Section -->
                             (&ul class:"right"
                                  (&li class:"has-form"
                                       (&div class:"row collapse"
                                             (&form action:"/accounts/search"
                                                    (&div class:"large-12 small-12 columns"
                                                          (&input type:"text"
                                                                  name:"terms"
                                                                 style:"width:100%"
                                                           placeholder:"Search Agent I/O"
                                                                 value:(escape searchtext))))))
                                  (if google_screen_name
                                      (then (&li class:"has-dropdown"
                                                 (&a href:"#" google_screen_name)
                                                 (&ul class:"dropdown"
                                                      (&li (&a href:"/accounts/google/signout" "Sign out of Google")))))
                                      (else (&li class:"active" (&a href:"/accounts/google/signin" "Sign in with Google")))))
                             ;;<!-- Left Nav Section -->
                             (&ul class:"left"
                                  (&li class:"has-dropdown"
                                       (&a href:"/accounts" "sign in with...")
                                       (&ul class:"dropdown"
                                            (account_services map:(do (service)
                                                                      (&li (&a href:(+ "/accounts/" (service vendor:) "/signin")
                                                                               (service vendor:)))))
                                            ;(&li (&a href:"/accounts/google/signin" "Google"))
                                            ;(&li (&a href:"/accounts/twitter/signin" "Twitter"))
                                            ;(&li (&a href:"/accounts/dropbox/signin" "Dropbox"))
                                            ;(&li (&a href:"/accounts/box/signin" "Box"))
                                            ;(&li (&a href:"/accounts/meetup/signin" "Meetup"))
                                            ;(&li (&a href:"/accounts/facebook/signin" "Facebook"))
                                            ;(&li (&a href:"/accounts/github/signin" "GitHub"))
                                            ;(&li (&a href:"/accounts/eventbrite/signin" "Eventbrite"))
                                            ;(&li (&a href:"/accounts/linkedin/signin" "LinkedIn"))
                                            ))
                                  (&li (&a href:"/accounts" "more"))
                                  )))))

(post "/accounts/signout"
      (authenticate)
      (set sessionid (oid ((REQUEST post) id:)))
      (if sessionid
          (set mongo (AgentMongoDB new))
          (mongo connect)
          (mongo removeWithCondition:(dict _id:sessionid) fromCollection:"accounts.sessions"))
      (redirect "/accounts"))

(get "/accounts"
     (authenticate)
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (&table (&thead (&th) (&th "provider") (&th "username"))
                                   (&tbody (SESSIONS map:
                                                     (do (session)
                                                         (&tr (&td (&form name:"signout"
                                                                        action:"/accounts/signout"
                                                                        method:"POST"
                                                                          (&input type:"submit" value:"Sign out")
                                                                          (&input type:"hidden"
                                                                                  name:"id"
                                                                              provider:(session provider:)
                                                                                 value:(session _id:))))
                                                              (&td (session provider:))
                                                              (&td (session _username:)))))))))))


(get "/accounts/google/files"
     (authenticate)
     (set info "")
     (set session (SESSIONS find:(do (session) (eq (session provider:) "google"))))
     (if session
         (set access_token (session access_token:))
         (set path "https://www.googleapis.com/drive/v2/files")
         (set URL (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:URL))
         (request setValue:"Bearer #{access_token}" forHTTPHeaderField:"Authorization")
         (set responseData
              (NSURLConnection sendSynchronousRequest:request
                                    returningResponse:(set responsep (NuReference new))
                                                error:(set errorp (NuReference new))))
         (if responseData
             (then (set info ((NSString alloc) initWithData:responseData encoding:NSUTF8StringEncoding)))
             (else (set info ((errorp value) description)))))
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-9 medium-10 small-12 columns"
                           (&h3 "Something")
                           (&pre (+ "**" (session description) "**"))
                           (&pre (+ "|" info "|"))
                           
                           (&div "ok")))))


(get "/accounts/twitter"
     (set serviceinfo (SERVICES find:(do (s) (eq (s vendor:) "twitter"))))
     (authenticate)
     (set session (SESSIONS find:(do (session) (eq (session provider:) "twitter"))))
     (if session
         (then
              (set request
                   (bare-oauth-request "GET"
                                       "https://api.twitter.com/1.1/statuses/user_timeline.json"
                                       (set query (dict oauth_version:"1.0"
                                                          oauth_nonce:(nonce)
                                                      oauth_timestamp:((((NSDate date) timeIntervalSince1970) intValue) stringValue)
                                                   oauth_consumer_key:(serviceinfo oauth_consumer_key:)
                                                          oauth_token:(session oauth_token:)
                                               oauth_signature_method:"HMAC-SHA1"
                                                          screen_name:(session screen_name:)))
                                       (serviceinfo oauth_consumer_secret:)
                                       (session oauth_token_secret:)))
              (set data (NSURLConnection sendSynchronousRequest:request
                                              returningResponse:(set response (NuReference new))
                                                          error:(set error (NuReference new))))
              (set s (NSString stringWithData:data encoding:NSUTF8StringEncoding))
              (set result (s agent_JSONValue))
              (&html (&body (&pre (session description))
                            (&hr)
                            (&ul (result map:
                                         (do (item)
                                             (&li (item text:))))))))
         (else "No.")))


(get "/accounts/google"
     (authenticate)
     (set google_session (SESSIONS find:(do (session) (eq (session provider:) "google"))))
     (set info "")
     (if google_session
         (set access_token (google_session access_token:))
         (set path "https://www.googleapis.com/drive/v2/about")
         (set URL (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:URL))
         (request setValue:"Bearer #{access_token}" forHTTPHeaderField:"Authorization")
         (set responseData
              (NSURLConnection sendSynchronousRequest:request
                                    returningResponse:(set responsep (NuReference new))
                                                error:(set errorp (NuReference new))))
         (if responseData
             (then (set info ((NSString alloc) initWithData:responseData encoding:NSUTF8StringEncoding)))
             (else (set info ((errorp value) description)))))
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-9 medium-10 small-12 columns"
                           (&h3 "Google")
                           (table-for-dictionary google_session)
                           info))))

(get "/accounts/dropbox"
     (authenticate)
     (set session (SESSIONS find:(do (session) (eq (session provider:) "dropbox"))))
     
     (set info "")
     (if session
         (set access_token (session access_token:))
         (set path "https://api.dropbox.com/1/account/info")
         
         (set URL (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:URL))
         (request setValue:"Bearer #{access_token}" forHTTPHeaderField:"Authorization")
         (set responseData
              (NSURLConnection sendSynchronousRequest:request
                                    returningResponse:(set responsep (NuReference new))
                                                error:(set errorp (NuReference new))))
         (if responseData
             (then (set info ((NSString alloc) initWithData:responseData encoding:NSUTF8StringEncoding)))
             (else (set info ((errorp value) description))))
         (set info (info agent_JSONValue)))
     
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (&h3 "Dropbox")
                           (&div (table-for-dictionary info))
                           (&div (table-for-dictionary session))
                           ))))

;; https://api.box.com/2.0/folders/0

(get "/accounts/box"
     (authenticate)
     (set session (SESSIONS find:(do (session) (eq (session provider:) "box"))))
     (set info nil)
     (if session
         (set access_token (session access_token:))
         (set path "https://api.box.com/2.0/folders/0")
         
         (set URL (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:URL))
         (request setValue:"Bearer #{access_token}" forHTTPHeaderField:"Authorization")
         (set responseData
              (NSURLConnection sendSynchronousRequest:request
                                    returningResponse:(set responsep (NuReference new))
                                                error:(set errorp (NuReference new))))
         (if responseData
             (then (set info ((NSString alloc) initWithData:responseData encoding:NSUTF8StringEncoding)))
             (else (set info ((errorp value) description))))
         
         (set info (info agent_JSONValue)))
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (&h3 "Box")
                           (&div (table-for-dictionary info))
                           (&div (table-for-dictionary session))))))

(get "/accounts/meetup"
     (authenticate)
     (set session (SESSIONS find:(do (session) (eq (session provider:) "meetup"))))
     
     (set info "")
     (if session
         (set access_token (session access_token:))
         (set path "https://api.meetup.com/dashboard")
         (set URL (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:URL))
         (request setValue:"Bearer #{access_token}" forHTTPHeaderField:"Authorization")
         (set responseData
              (NSURLConnection sendSynchronousRequest:request
                                    returningResponse:(set responsep (NuReference new))
                                                error:(set errorp (NuReference new))))
         (if responseData
             (then (set info ((NSString alloc) initWithData:responseData encoding:NSUTF8StringEncoding)))
             (else (set info ((errorp value) description))))
         (set info (info agent_JSONValue)))
     
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (&h3 "Meetup")
                           (&div (table-for-dictionary info))
                           (&div (table-for-dictionary session))
                           ))))


(def row-of-one (item1)
     (&div class:"row" (&div class:"large-12 small-12 columns" item1)))

(def row-of-two (item1 item2)
     (&div class:"row" (&div class:"large-6 small-6 columns" item1) (&div class:"large-6 small-6 columns" item2)))




(def value-for-entry (entry)
     (if (entry isKindOfClass:NSDictionary)
         (then (table-for-dictionary entry))
         (else (entry stringValue))))

(def table-for-dictionary (dictionary)
     (set keys ((dictionary allKeys) sort))
     (&table style:"width:100%; table-layout: fixed;"
             (&tbody
                    (keys map:
                          (do (key)
                              (&tr (&td style:"width:15%; word-wrap:break-word; font-size:80%" key)
                                   (&td style:"width:85%; word-wrap:break-word; font-size:80%"
                                        (value-for-entry (dictionary objectForKey:key)))))))))

(files "/accounts/*path:" "public")

(get "/*path:"
     (authenticate)
     (RESPONSE setStatus:404)
     (htmlpage "Not found"
               (topbar)
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (&h3 "404 Resource Not Found")
                           (&p "You wanted: #{*path}")
                           (&p "Sorry.")))))

(AgentHTTPServer run)

