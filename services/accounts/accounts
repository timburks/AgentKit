#!/usr/local/bin/nush
(load "AgentHTTP")
(load "AgentCrypto")
(load "AgentMongoDB")
(load "AgentJSON")
(load "AgentKit")

(put "/accounts/reload"
     (load "keys")
     (let ((mongo (AgentMongoDB new)))
          (mongo connect)
          (mongo removeWithCondition:nil fromCollection:"accounts.services")
          (SERVICES each:
                    (do (service)
                        (mongo insertObject:service intoCollection:"accounts.services"))))
     "ok")

(def oid (string) ;; MongoDB helper
     ((AgentBSONObjectID alloc) initWithString:string))

(def strip-time (time)
     ((time componentsSeparatedByString:".") 0))

(macro redirect (location)
       `(progn (RESPONSE setStatus:303)
               (RESPONSE setValue:,location forHTTPHeader:"Location")
               "redirecting"))

(def nonce () ((AgentUUID new) stringValue))

(set PASSWORD_SALT "agent.io")
(class NSString
 (- (id) md5HashWithSalt:(id) salt is
    (((self dataUsingEncoding:NSUTF8StringEncoding)
      agent_hmacMd5DataWithKey:(salt dataUsingEncoding:NSUTF8StringEncoding))
     agent_hexEncodedString)))

(class NSNumber
 (- map:fn is
    (set result (array))
    (self times:(do (i) (result addObject:(fn i))))
    result))

(macro get-user (REQUEST)
       `(progn (set screen_name nil)
               (set session nil)
               (if (set token ((,REQUEST cookies) session:))
                   (set mongo (AgentMongoDB new))
                   (mongo connect)
                   (set session (mongo findOne:(dict cookie:token) inCollection:"accounts.sessions"))
                   (set screen_name (session username:)))
               session))

(set ADMIN "tim")

(macro administrator-is-logged-in (REQUEST)
       `(progn (unless (and (defined screen_name) screen_name)
                       (get-user ,REQUEST))
               (and screen_name (eq screen_name ADMIN))))

(macro authenticate ()
       '(progn (get-user REQUEST)))

;;;;;

(macro adduser-form (message)
       `(progn (htmlpage "Add User"
                         (topbar)
                         (&div class:"row"
                               (&div class:"medium-6 medium-centered columns"
                                     (&form method:"post"
                                            action:"/accounts/adduser"
                                            (&fieldset (&legend ,message)
                                                       (&label for:"username" "Username "
                                                             style:"margin-right:2em"
                                                               (&input id:"username"
                                                                     type:"text"
                                                                     name:"username"
                                                                    title:"username"
                                                                    width:20))
                                                       (&label for:"password" "Password "
                                                             style:"margin-right:2em"
                                                               (&input id:"password"
                                                                     type:"password"
                                                                     name:"password"
                                                                    title:"password"
                                                                    width:20))
                                                       (&label for:"password2" "Password (again) "
                                                             style:"margin-right:2em"
                                                               (&input id:"password2"
                                                                     type:"password"
                                                                     name:"password2"
                                                                    title:"password"
                                                                    width:20))
                                                       (&button class:"button tiny"
                                                                 type:"submit"
                                                                "&nbsp;Add user&nbsp;"))))))))

(get "/accounts/adduser"
     (authenticate)
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set count (mongo countWithCondition:nil inCollection:"users" inDatabase:"accountsH"))
     (if (or (eq count 0)
             screen_name)
         (then (set message "Add a new user.")
               (adduser-form message))
         (else screen_name)))

(post "/accounts/adduser"
      (authenticate)
      (set mongo (AgentMongoDB new))
      (mongo connect)
      (set count (mongo countWithCondition:nil inCollection:"users" inDatabase:"accountsH"))
      
      (if (or (eq count 0)
              screen_name)
          (then (set ip-address ((REQUEST headers) X-Forwarded-For:))
                (set username ((REQUEST post) username:))
                (set password ((REQUEST post) password:))
                (set confirmation ((REQUEST post) password2:))
                
                (cond ((or (not username) (eq (username length) 0))
                       (set message "Please specify a username.")
                       (adduser-form message))
                      ((or (not password) (< (password length) 4))
                       (set message "Passwords must be at least 4 characters.")
                       (adduser-form message))
                      ((!= password confirmation)
                       (set message "Password and password confirmation entries must match.")
                       (adduser-form message))
                      (else ;; create the account
                            (set account (create-user username password))
                            (puts "account created")
                            
                            (unless (set SESSIONTOKEN ((REQUEST cookies) session:))
                                    (set SESSIONTOKEN (nonce))
                                    (set sessionCookie (AgentHTTPCookie cookieWithName:"session" value:SESSIONTOKEN))
                                    (RESPONSE setValue:(sessionCookie stringValue) forHTTPHeader:"Set-Cookie"))
                            
                            (set session (dict account_id:(account _id:) username:username token:SESSIONTOKEN))
                            (puts "session created")
                            (set mongo (AgentMongoDB new))
                            (mongo connect)
                            (mongo updateObject:session
                                   inCollection:"accounts.sessions"
                                  withCondition:(dict account_id:(account _id:))
                              insertIfNecessary:YES
                          updateMultipleEntries:NO)
                            (puts "session saved")
                            (RESPONSE redirectResponseToLocation:"/accounts"))))
          (else nil)))

(delete "/accounts/users/userid:"
        (authenticate)
        (if screen_name
            (then (set userid (oid userid))
                  (set mongo (AgentMongoDB new))
                  (mongo connect)
                  (mongo removeWithCondition:(dict _id:userid) fromCollection:"accounts.users")
                  (redirect "/accounts/users"))
            (else nil)))

(get "/accounts/users"
     (authenticate)
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set users (mongo findArray:nil inCollection:"accounts.users"))
     (htmlpage "Agent I/O Users"
               (topbar)
               (&div class:"row"
                     (&div class:"small-12 medium-8 medium-centered columns"
                           (&h1 "Users")
                           (&dl class:"accordion" data-accordion:1
                                (users mapWithIndex:
                                       (do (user index)
                                           (&dd (&span style:"float:right"
                                                       (&a href:"#" "Delete"
                                                        onclick:(js-delete (+ "/accounts/users/" (user _id:)))))
                                                (&a href:"#panel#{index}" (user username:))
                                                (&div id:"panel#{index}"
                                                   style:"background-color:#888;"
                                                   class:"content"
                                                      (divs-for-dictionary user))))))))))


(get "/accounts/sessions"
     (authenticate)
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set sessions (mongo findArray:nil inCollection:"accounts.sessions"))
     (htmlpage "Agent I/O Sessions"
               (topbar)
               (&div class:"row"
                     (&div class:"small-12 medium-8 medium-centered columns"
                           (&h1 "Sessions")
                           (&dl class:"accordion" data-accordion:1
                                (sessions mapWithIndex:
                                          (do (session index)
                                              (&dd (&span style:"float:right"
                                                          (&a href:"#" "Delete"
                                                           onclick:(js-delete (+ "/accounts/sessions/" (session _id:)))))
                                                   (&a href:"#panel#{index}" (session _id:))
                                                   (&div id:"panel#{index}"
                                                      style:"background-color:#888;"
                                                      class:"content"
                                                         (divs-for-dictionary session))))))))))

(def lookup-user (username password)
     (puts "lookup-user")
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (mongo findOne:(dict username:username) inCollection:"accounts.users"))

(def create-user (username password)
     (puts (+ "create-user" username password))
     (if (set user (lookup-user username password))
         (puts "user exists")
         (return nil))
     (puts "creating user")
     (set user (dict username:username
                     password:(password md5HashWithSalt:PASSWORD_SALT)
                       secret:(nonce)))
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (mongo updateObject:user
            inCollection:"accounts.users"
           withCondition:(dict username:username)
       insertIfNecessary:YES
   updateMultipleEntries:NO)
     (mongo findOne:(dict username:username) inCollection:"accounts.users"))

;;;;; Twitter-based signin

;; ===== OAuth =====

(def oauth-sign (method url m secret)
     (set presignature ((((m allKeys) sort) map:
                         (do (key) ((+ key "=" ((m objectForKey:key) agent_urlEncodedString))))) componentsJoinedByString:"&"))
     (set signature-base-string (+ method "&" (url agent_urlEncodedString) "&" (presignature agent_urlEncodedString)))
     (puts signature-base-string)
     (set signature ((signature-base-string dataUsingEncoding:NSUTF8StringEncoding)
                     agent_hmacSha1DataWithKey:(secret dataUsingEncoding:NSUTF8StringEncoding)))
     (set b64 (signature agent_base64EncodedString))
     (m setObject:b64 forKey:"oauth_signature"))

(def bare-oauth-request (method method_url method_call consumer_secret token_secret)
     (oauth-sign method method_url method_call (+ consumer_secret "&" token_secret))
     (set path method_url)
     
     (if (eq method "GET")
         (then (set path (+ path "?" (method_call agent_urlQueryString)))))
     
     (set url (NSURL URLWithString:path))
     (set request (NSMutableURLRequest requestWithURL:url))
     (request setHTTPMethod:method)
     
     (set authorization (+ "OAuth "
                           ((((method_call allKeys) sort) map:
                             (do (key) ((+ key "=\"" ((method_call objectForKey:key) agent_urlEncodedString) "\""))))
                            componentsJoinedByString:",")))
     (request addValue:authorization forHTTPHeaderField:"Authorization")
     request)

(def oauth-request (method method_url method_call consumer_secret token_secret)
     (if NO
         (oauth-sign method method_url method_call (+ consumer_secret "&" token_secret))
         (set path method_url)
         (set url (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:url))
         (request setHTTPMethod:method)
         (set authorization (+ "OAuth "
                               ((((method_call allKeys) sort) map:
                                 (do (key) ((+ key "=\"" ((method_call objectForKey:key) agent_urlEncodedString) "\""))))
                                componentsJoinedByString:",")))
         (request addValue:authorization forHTTPHeaderField:"Authorization"))
     (set request (bare-oauth-request method method_url method_call consumer_secret token_secret))
     (set response (NuReference new))
     (set error (NuReference new))
     (set data (NSURLConnection sendSynchronousRequest:request returningResponse:response error:error))
     (set s (NSString stringWithData:data encoding:NSUTF8StringEncoding))
     (set result (s agent_urlQueryDictionary))
     result)

(get "/accounts/twitter/connect"
     (authenticate)
     (unless screen_name (return nil))
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set SERVICES (mongo findArray:nil inCollection:"accounts.services"))
     (set serviceinfo (SERVICES find:(do (s) (eq (s vendor:) "twitter"))))
     (set returnAddress (((REQUEST query) agent_urlQueryDictionary) r:))
     (set result
          (oauth-request "POST"
                         (serviceinfo oauth_request_token_url:)
                         (dict oauth_version:"1.0"
                                 oauth_nonce:(nonce)
                             oauth_timestamp:((((NSDate date) timeIntervalSince1970) intValue) stringValue)
                              oauth_callback:"http://alpha.agent.io/accounts/twitter/callback"
                          oauth_consumer_key:(serviceinfo oauth_consumer_key:)
                      oauth_signature_method:"HMAC-SHA1")
                         (serviceinfo oauth_consumer_secret:)
                         ""))
     (unless (and (result oauth_token:) (result oauth_token_secret:))
             (puts "Twitter OAuth error")
             (puts (result description))
             (return (redirect "/accounts")))
     (set oauth_session (dict oauth_token:(result oauth_token:)
                       oauth_token_secret:(result oauth_token_secret:)
                           return_address:returnAddress
                               created_at:(NSDate date)))
     (mongo insertObject:oauth_session intoCollection:"accounts.twitter_sessions")
     (set url (+ (serviceinfo oauth_authorize_url:) "?oauth_token=" (result oauth_token:)))
     (redirect url))

(get "/accounts/twitter/callback"
     (authenticate)
     (unless screen_name (return nil))
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set SERVICES (mongo findArray:nil inCollection:"accounts.services"))
     (set service "twitter")
     (set serviceinfo (SERVICES find:(do (s) (eq (s vendor:) service))))
     (set TOKEN (((REQUEST query) agent_urlQueryDictionary) oauth_token:))
     (unless TOKEN
             (NSLog "no token sent to twitter-callback, assuming access denied")
             (return (redirect "/accounts")))
     (set VERIFIER (((REQUEST query) agent_urlQueryDictionary) oauth_verifier:))
     (unless VERIFIER
             (NSLog "no verifier set to twitter-callback, assuming access denied")
             (return (redirect "/accounts")))
     (set oauth_session (mongo findOne:(dict oauth_token:TOKEN) inCollection:"accounts.twitter_sessions"))
     (unless oauth_session
             (NSLog "oauth session not found")
             (&pre ((REQUEST query) description))
             (return (redirect "/accounts")))
     (set returnAddress (oauth_session "return_address"))
     (set result
          (oauth-request "POST"
                         (serviceinfo oauth_access_token_url:)
                         (dict oauth_version: "1.0"
                                 oauth_nonce:(nonce)
                             oauth_timestamp:((((NSDate date) timeIntervalSince1970) intValue) stringValue)
                          oauth_consumer_key:(serviceinfo oauth_consumer_key:)
                                 oauth_token:TOKEN
                      oauth_signature_method:"HMAC-SHA1"
                              oauth_verifier:VERIFIER)
                         (serviceinfo oauth_consumer_secret:)
                         (oauth_session oauth_token_secret:)))
     
     ;; delete the old session before we parse the results
     (mongo removeWithCondition:(dict oauth_token:TOKEN) fromCollection:"accounts.twitter_sessions")
     
     (set SCREEN_NAME (result screen_name:))
     (set USER_ID (result user_id:))
     (set TOKEN (result oauth_token:))
     (set TOKEN_SECRET (result oauth_token_secret:))
     (set SECRET (+ (serviceinfo oauth_consumer_secret:) "&" TOKEN_SECRET))
     
     (NSLog (result description))
     
     ;; save connection info in database
     (set connection (dict provider:service
                           protocol:"OAuth"
                         account_id:(session account_id:)
                            created:(NSDate date)
                              token:result))
     (mongo insertObject:connection intoCollection:"accounts.connections")
     
     (redirect (or returnAddress "/accounts")))

;;;;;

;; https://developers.google.com/accounts/docs/OAuth2Login
(get "/accounts/google/update"
     (authenticate)
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set sessions (mongo findArray:(dict provider:"google") inCollection:"accounts.connections"))
     (sessions each:
               (do (session)
                   (set id_token (session id_token:))
                   ;; the response is a JSON Web Token (http://openid.net/specs/draft-jones-json-web-token-07.html)
                   (set parts (id_token componentsSeparatedByString:"."))
                   (set payload (parts 1))
                   ;; convert the base64 encoding to the version we can decode
                   (set payload (payload stringByReplacingOccurrencesOfString:"." withString:"+"))
                   (set payload (payload stringByReplacingOccurrencesOfString:"_" withString:"/"))
                   (set data (NSData agent_dataWithBase64EncodedString:payload))
                   (set string (NSString stringWithData:data encoding:NSUTF8StringEncoding))
                   (set object (string agent_JSONValue))
                   ;; save session info in database
                   (session user:object)
                   ;(session _username:((session user:) email:))
                   (mongo updateObject:session
                          inCollection:"accounts.connections"
                         withCondition:(dict _id:(session _id:))
                     insertIfNecessary:NO
                 updateMultipleEntries:NO)))
     (redirect "/accounts"))

;; GENERIC OAuth2

(get "/accounts/service:/connect"
     (authenticate)
     (unless screen_name (return nil))
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set SERVICES (mongo findArray:nil inCollection:"accounts.services"))
     (set serviceinfo (SERVICES find:(do (s) (eq (s vendor:) service))))
     (set token (nonce))
     (set query (dict client_id:(serviceinfo client_id:)
                  response_type:"code"
                   redirect_uri:(serviceinfo redirect_uri:)
                          state:token))
     (if (serviceinfo authorize_args:) (query addEntriesFromDictionary:(serviceinfo authorize_args:)))
     (set path (+ (serviceinfo authorize_url:) "?" (query agent_urlQueryString)))
     (redirect path))

(get "/accounts/service:/oauth2callback"
     (authenticate)
     (unless screen_name (return nil))
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set SERVICES (mongo findArray:nil inCollection:"accounts.services"))
     (set serviceinfo (SERVICES find:(do (s) (eq (s vendor:) service))))
     (NSLog "#{service} CALLBACK")
     (set query ((REQUEST query) agent_urlQueryDictionary))
     (unless (query code:)
             (return (redirect "/accounts")))
     (NSLog (query code:))
     (set path (serviceinfo access_url:))
     (set post (dict code:(query code:)
                client_id:(serviceinfo client_id:)
            client_secret:(serviceinfo client_secret:)
             redirect_uri:(serviceinfo redirect_uri:)
               grant_type:"authorization_code"))
     (set request (NSMutableURLRequest requestWithURL:(NSURL URLWithString:path)))
     (request setHTTPMethod:"POST")
     ;(request setValue:"application/json" forHTTPHeaderField:"Accept")
     (request setHTTPBody:((post agent_urlQueryString) dataUsingEncoding:NSUTF8StringEncoding))
     (set responseData
          (NSURLConnection sendSynchronousRequest:request
                                returningResponse:(set responsep (NuReference new))
                                            error:(set errorp (NuReference new))))
     (puts (((responsep value) allHeaderFields) description))
     
     (set responseString (NSString stringWithData:responseData encoding:NSUTF8StringEncoding))
     (NSLog "RESPONSE: #{responseString}")
     
     (set contentType (((responsep value) allHeaderFields) Content-Type:))
     (NSLog "CONTENT TYPE: #{contentType}")
     (if (or (/^application\/json/ findInString:contentType)
             (/^text\/javascript/ findInString:contentType))
         (then (set responseObject (responseString agent_JSONValue)))
         (else (set responseObject (responseString agent_urlQueryDictionary))))
     (NSLog "RESPONSEOBJECT: #{(responseObject description)}")
     
     ;; save connection info in database
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set connection (dict provider:service
                           protocol:"OAuth2"
                         account_id:(session account_id:)
                            created:(NSDate date)
                              token:responseObject))
     (mongo insertObject:connection intoCollection:"accounts.connections")
     (redirect "/accounts"))

(macro htmlpage (title *body)
       `(&html class:"no-js" lang:"en"
               (&head (&meta charset:"utf-8")
                      (&meta name:"viewport" content:"width=device-width, initial-scale=1.0")
                      (&meta name:"description" content:"My Agent on the Internet")
                      (&meta name:"keywords" content:"agent,personal")
                      (&meta name:"author" content:"Tim Burks")
                      (&title ,title)
                      (&link rel:"stylesheet" href:"/foundation-5/css/foundation.min.css")
                      (&script src:"/foundation-5/js/vendor/modernizr.js"))
               (&body ,@*body
                      ;(&div class:"row" (&div class:"large-12 columns" (&hr) "alpha.agent.io"))
                      (&script src:"/foundation-5/js/vendor/jquery.js")
                      (&script src:"/foundation-5/js/foundation.min.js")
                      (&script "$(document).foundation();"))))

(def escape (string)
     (set string (string stringByReplacingOccurrencesOfString:"&" withString:"&amp;"))
     (set string (string stringByReplacingOccurrencesOfString:"<" withString:"&lt;"))
     (set string (string stringByReplacingOccurrencesOfString:">" withString:"&gt;"))
     (set string (string stringByReplacingOccurrencesOfString:"\"" withString:"&quot;"))
     string)

(def js-delete (path)
     (+ "$.ajax({url:'" path "',type:'DELETE',success:function(response) {location.reload(true);}}); return false;"))

(def js-post (path arguments)
     (set command (+ "var form = document.createElement('form');"
                     "form.setAttribute('method', 'POST');"
                     "form.setAttribute('action', '" path "');"))
     (arguments each:
                (do (key value)
                    (command appendString:(+ "var field = document.createElement('input');"
                                             "field.setAttribute('name', '" key "');"
                                             "field.setAttribute('value', '" value "');"
                                             "form.appendChild(field);"))))
     (command appendString:"form.submit();")
     (command appendString:"return false;")
     command)

(macro topbar-empty ()
       (&div class:"contain-to-grid" style:"margin-bottom:20px;"
             (&nav class:"top-bar" data-topbar:1)))

(macro topbar ()
       (set mongo (AgentMongoDB new))
       (mongo connect)
       (set account_services (mongo findArray:(dict $query:(dict) $orderby:(dict vendor:1))
                                 inCollection:"accounts.services"))
       (set additional-items (array (&li class:"divider")
                                    (&li class:"has-dropdown" (&a href:"#" "view...")
                                         (&ul class:"dropdown"
                                              (&li (&a href:"/accounts/users" "users"))
                                              (&li class:"divider")
                                              (&li (&a href:"/accounts/sessions" "sessions"))
                                              (&li class:"divider")
                                              (&li (&a href:"/accounts/services" "services"))))
                                    (&li class:"divider")
                                    (&li class:"has-dropdown" (&a href:"#" "connect to...")
                                         (&ul class:"dropdown"
                                              (account_services map:(do (service)
                                                                        (&li (&a href:(+ "/accounts/" (service vendor:) "/connect")
                                                                                 (service vendor:)))))))))
       (topbar-for-app "ACCOUNTS" additional-items))

(post "/accounts/disconnect"
      (authenticate)
      (set connectionid ((REQUEST post) id:))
      (if connectionid
          (set mongo (AgentMongoDB new))
          (mongo connect)
          (mongo removeWithCondition:(dict _id:(oid connectionid)) fromCollection:"accounts.connections"))
      (redirect "/accounts"))

(post "/accounts/signout"
      (authenticate)
      (set mongo (AgentMongoDB new))
      (mongo connect)
      (mongo removeWithCondition:(dict username:screen_name) fromCollection:"accounts.sessions")
      (redirect "/signin"))

(get "/accounts"
     (authenticate)
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (if session
         (then (set connections (mongo findArray:(dict account_id:(session account_id:)) inCollection:"accounts.connections")))
         (else (set connections (array))))
     (if screen_name
         (then (htmlpage "Agent I/O"
                         (topbar)
                         (&div class:"row"
                               (&div class:"medium-8 medium-centered small-12 columns"
                                     (if (connections count)
                                         (then
                                              (&div (&h2 "Connections")
                                                    (&dl class:"accordion" data-accordion:1
                                                         (connections mapWithIndex:
                                                                      (do (connection index)
                                                                          (&dd (&span style:"float:right"
                                                                                      (&a href:"#" "Disconnect"
                                                                                       onclick:(js-post "/accounts/disconnect"
                                                                                                        (dict id:(connection _id:)))))
                                                                               (&a href:"#panel#{index}" (connection provider:))
                                                                               (&div id:"panel#{index}"
                                                                                  style:"background-color:#888;"
                                                                                  class:"content"
                                                                                     (divs-for-dictionary connection)))))))))))))
         (else (redirect "/signin"))))





(get "/accounts/services"
     (authenticate)
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (if session
         (then (set services (mongo findArray:(dict $query:(dict) $orderby:(dict vendor:1))
                                 inCollection:"accounts.services")))
         (else (set services (array))))
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (if (services count)
                               (&table (&thead (&th "service") (&th "protocol"))
                                       (&tbody (services map:
                                                         (do (service)
                                                             (&tr (&td (&a href:(service info_url:) (service vendor:)))
                                                                  (&td (service protocol:))))))))))))

(get "/accounts/log"
     (authenticate)
     
     (htmlpage "Agent I/O"
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (&h1 "Something")
                           ))
               )
     
     )

(get "/accounts/google/files"
     (authenticate)
     (set info "")
     (set session (SESSIONS find:(do (session) (eq (session provider:) "google"))))
     (if session
         (set access_token (session access_token:))
         (set path "https://www.googleapis.com/drive/v2/files")
         (set URL (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:URL))
         (request setValue:"Bearer #{access_token}" forHTTPHeaderField:"Authorization")
         (set responseData
              (NSURLConnection sendSynchronousRequest:request
                                    returningResponse:(set responsep (NuReference new))
                                                error:(set errorp (NuReference new))))
         (if responseData
             (then (set info ((NSString alloc) initWithData:responseData encoding:NSUTF8StringEncoding)))
             (else (set info ((errorp value) description)))))
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-9 medium-10 small-12 columns"
                           (&h3 "Something")
                           (&pre (+ "**" (session description) "**"))
                           (&pre (+ "|" info "|"))
                           
                           (&div "ok")))))


(get "/accounts/twitter"
     (set mongo (AgentMongoDB new))
     (mongo connect)
     (set SERVICES (mongo findArray:nil inCollection:"accounts.services"))
     (set serviceinfo (SERVICES find:(do (s) (eq (s vendor:) "twitter"))))
     (authenticate)
     (set session (SESSIONS find:(do (session) (eq (session provider:) "twitter"))))
     (if session
         (then
              (set request
                   (bare-oauth-request "GET"
                                       "https://api.twitter.com/1.1/statuses/user_timeline.json"
                                       (set query (dict oauth_version:"1.0"
                                                          oauth_nonce:(nonce)
                                                      oauth_timestamp:((((NSDate date) timeIntervalSince1970) intValue) stringValue)
                                                   oauth_consumer_key:(serviceinfo oauth_consumer_key:)
                                                          oauth_token:(session oauth_token:)
                                               oauth_signature_method:"HMAC-SHA1"
                                                          screen_name:(session screen_name:)))
                                       (serviceinfo oauth_consumer_secret:)
                                       (session oauth_token_secret:)))
              (set data (NSURLConnection sendSynchronousRequest:request
                                              returningResponse:(set response (NuReference new))
                                                          error:(set error (NuReference new))))
              (set s (NSString stringWithData:data encoding:NSUTF8StringEncoding))
              (set result (s agent_JSONValue))
              (&html (&body (&pre (session description))
                            (&hr)
                            (&ul (result map:
                                         (do (item)
                                             (&li (item text:))))))))
         (else "No.")))


(get "/accounts/google"
     (authenticate)
     (set google_session (SESSIONS find:(do (session) (eq (session provider:) "google"))))
     (set info "")
     (if google_session
         (set access_token (google_session access_token:))
         (set path "https://www.googleapis.com/drive/v2/about")
         (set URL (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:URL))
         (request setValue:"Bearer #{access_token}" forHTTPHeaderField:"Authorization")
         (set responseData
              (NSURLConnection sendSynchronousRequest:request
                                    returningResponse:(set responsep (NuReference new))
                                                error:(set errorp (NuReference new))))
         (if responseData
             (then (set info ((NSString alloc) initWithData:responseData encoding:NSUTF8StringEncoding)))
             (else (set info ((errorp value) description)))))
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-9 medium-10 small-12 columns"
                           (&h3 "Google")
                           (table-for-dictionary google_session)
                           info))))

(get "/accounts/dropbox"
     (authenticate)
     (set session (SESSIONS find:(do (session) (eq (session provider:) "dropbox"))))
     
     (set info "")
     (if session
         (set access_token (session access_token:))
         (set path "https://api.dropbox.com/1/account/info")
         
         (set URL (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:URL))
         (request setValue:"Bearer #{access_token}" forHTTPHeaderField:"Authorization")
         (set responseData
              (NSURLConnection sendSynchronousRequest:request
                                    returningResponse:(set responsep (NuReference new))
                                                error:(set errorp (NuReference new))))
         (if responseData
             (then (set info ((NSString alloc) initWithData:responseData encoding:NSUTF8StringEncoding)))
             (else (set info ((errorp value) description))))
         (set info (info agent_JSONValue)))
     
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (&h3 "Dropbox")
                           (&div (table-for-dictionary info))
                           (&div (table-for-dictionary session))
                           ))))

;; https://api.box.com/2.0/folders/0

(get "/accounts/box"
     (authenticate)
     (set session (SESSIONS find:(do (session) (eq (session provider:) "box"))))
     (set info nil)
     (if session
         (set access_token (session access_token:))
         (set path "https://api.box.com/2.0/folders/0")
         
         (set URL (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:URL))
         (request setValue:"Bearer #{access_token}" forHTTPHeaderField:"Authorization")
         (set responseData
              (NSURLConnection sendSynchronousRequest:request
                                    returningResponse:(set responsep (NuReference new))
                                                error:(set errorp (NuReference new))))
         (if responseData
             (then (set info ((NSString alloc) initWithData:responseData encoding:NSUTF8StringEncoding)))
             (else (set info ((errorp value) description))))
         
         (set info (info agent_JSONValue)))
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (&h3 "Box")
                           (&div (table-for-dictionary info))
                           (&div (table-for-dictionary session))))))

(get "/accounts/meetup"
     (authenticate)
     (set session (SESSIONS find:(do (session) (eq (session provider:) "meetup"))))
     
     (set info "")
     (if session
         (set access_token (session access_token:))
         (set path "https://api.meetup.com/dashboard")
         (set URL (NSURL URLWithString:path))
         (set request (NSMutableURLRequest requestWithURL:URL))
         (request setValue:"Bearer #{access_token}" forHTTPHeaderField:"Authorization")
         (set responseData
              (NSURLConnection sendSynchronousRequest:request
                                    returningResponse:(set responsep (NuReference new))
                                                error:(set errorp (NuReference new))))
         (if responseData
             (then (set info ((NSString alloc) initWithData:responseData encoding:NSUTF8StringEncoding)))
             (else (set info ((errorp value) description))))
         (set info (info agent_JSONValue)))
     
     (htmlpage "Agent I/O"
               (topbar)
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (&h3 "Meetup")
                           (&div (table-for-dictionary info))
                           (&div (table-for-dictionary session))
                           ))))


(def row-of-one (item1)
     (&div class:"row" (&div class:"large-12 small-12 columns" item1)))

(def row-of-two (item1 item2)
     (&div class:"row" (&div class:"large-6 small-6 columns" item1) (&div class:"large-6 small-6 columns" item2)))


(set MAXW 48)

(def value-for-entry (entry)
     (cond ((entry isKindOfClass:NSDictionary)
            (table-for-dictionary entry))
           ((entry isKindOfClass:NSDate)
            (entry description)
            )
           (else (set string (entry stringValue))
                 (if (> (string length) MAXW)
                     (set string (+ (string substringToIndex:(- MAXW 3)) "...")))
                 string)))

(def table-for-dictionary (dictionary)
     (set keys ((dictionary allKeys) sort))
     (&table style:"width:100%; "
             (&tbody
                    (keys map:
                          (do (key)
                              (&tr (&td style:"width:85%; word-wrap:break-word;"
                                        (&strong key) (&br)
                                        (value-for-entry (dictionary objectForKey:key)))))))))

(def dvalue-for-entry (entry)
     (cond ((entry isKindOfClass:NSDictionary)
            (divs-for-dictionary entry))
           ((entry isKindOfClass:NSDate)
            (entry description))
           (else (set string (entry stringValue))
                 (if (> (string length) MAXW)
                     (set string (+ (string substringToIndex:(- MAXW 3)) "...")))
                 string)))

(def divs-for-dictionary (dictionary)
     (set keys ((dictionary allKeys) sort))
     (&div style:"margin-left:10px; border:2px solid #EEE; background-color:#FFF; padding:2px"
           (keys map:
                 (do (key)
                     (&div style:"word-wrap:break-word;"
                           (&strong key) (&br)
                           (dvalue-for-entry (dictionary objectForKey:key)))))))


(files "/accounts/*path:" "public")

(get "/*path:"
     (authenticate)
     (RESPONSE setStatus:404)
     (htmlpage "Not found"
               (topbar)
               (&div class:"row"
                     (&div class:"large-12 columns"
                           (&h3 "404 Resource Not Found")
                           (&p "You wanted: #{*path}")
                           (&p "Sorry.")))))

;(AgentHTTPServer run)
(set s ((AgentLibEVHTPServer alloc) initWithService:(AgentHTTPService sharedService)))
(s setVerbose:YES)
(s run)

